#include <iostream>
#include <vector>
#include <omp.h>

int main() {
    // Create a vector containing integer values
    std::vector<int> my_vector = {1, 2, 3, 4, 5};
    // Initialize the total sum to 0
    int my_total = 0;

    // Begin parallel region with default(none) attribute, indicating no default data sharing
    #pragma omp parallel for default(none) shared(my_vector, my_total)
    // Parallel loop to iterate over elements of the vector
    for (int i = 0; i < my_vector.size(); ++i) {
        // Atomic update operation to avoid race conditions while updating the total sum
        #pragma omp atomic update
        my_total += my_vector[i];
    }

    // Print the total sum
    std::cout << "Total sum using atomic update: " << my_total << std::endl;

    return 0;
}
